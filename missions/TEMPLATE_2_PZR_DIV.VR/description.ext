#define description

#include "core\description.hpp" //DO NOT REMOVE
#include "customization\missionSettings.hpp" //DO NOT REMOVE
#include "modules\modules.sqf" //DO NOT REMOVE

#undef description
#define description_functions

class CfgFunctions {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_functions
#define description_titles

class rscTitles {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_titles
#define description_notifications

class CfgNotifications {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_notifications

#define description_sounds

class CfgSounds {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_sounds

#define description_insignia

class CfgUnitInsignia {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_insignia

#define description_params

class Params {

    #include "core\description.hpp" //DO NOT REMOVE
    #include "modules\modules.sqf" //DO NOT REMOVE

};

#undef description_params

//This adds mARMAcp server performance reporting for http://marma.io/
class mARMADebug {
    // Returns the world name every 60 seconds
    class WorldName {
        name = "World Name";
        code = "WorldName";
        interval = 60;
    };

    // Returns the mission name every 60 seconds
    class MissionName {
        name = "Mission Name";
        code = "MissionName";
        interval = 60;
    };

    // Will report living players every 60 seconds
    class Players_Live {
        name = "Players - Living";
        code = "{isPlayer _x} count playableUnits";
        interval = 60;
    };

    // Will report all players every 60 seconds
    class Players_All {
        name = "Players - Total";
        code = "count allPlayers";
        interval = 60;
    };

    // Will report total number of non-playable units every 60 seconds
    class AI_All {
        name = "AI - Total";
        code = "(count allUnits) - (count playableUnits)";
        interval = 60;
    };

    // Will report total map objects every 60 seconds
    class MapObjects {
        name = "Objects - Total";
        code = "count allMissionObjects 'All'";
        interval = 60;
    };

    // Will report the average FPS every second, based on the average of the last 16 frames
    class ServerFPS_Avg {
        name = "FPS - Average of Last 16 Frames"; // Name of the metric
        code = "diag_fps"; // Code to run which returns a number or string
        interval = 1; // How often the metric is read
    };

    // Will report the lowest FPS every second, based on the slowest of the last 16 frames
    class ServerFPS_Min {
        name = "FPS - Lowest of Last 16 Frames"; // Name of the metric
        code = "diag_fpsMin"; // Code to run which returns a number or string
        interval = 1; // How often the metric is read
    };
};
